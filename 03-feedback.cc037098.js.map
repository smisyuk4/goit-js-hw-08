{"mappings":"iiBAoBA,IAkByBA,EAEjBC,EACAC,EAnBFC,EAASC,EAFfC,EAAA,UAGMC,EAAa,GACfC,EAAUC,aAAaC,QAAQ,uBAE7BC,EAAO,CACTC,KAAMC,SAASC,cAAc,kBAC7BZ,MAAOW,SAASC,cAAc,SAC9BX,QAASU,SAASC,cAAc,aAGpC,GAAIN,EAAS,CACT,IAAMO,EAAkBC,KAAKC,MAAMT,GAO/BN,GAFiBD,EAHLc,GAKZb,MACAC,EACAF,EADAE,QAGJQ,EAAKT,MAAMgB,MAAQhB,EACnBS,EAAKR,QAAQe,MAAQf,EAErBI,EAAWL,MAAQA,EACnBK,EAAWJ,QAAUA,C,CA2BzBQ,EAAKC,KAAKO,iBAAiB,QAASf,EAAOgB,UAxBtB,SAACC,GAClB,IAAMC,EAAUD,EAAME,OAAOC,aAAa,QAE1B,UAAZF,IACAf,EAAWL,MAAQmB,EAAME,OAAOL,OAGpB,YAAZI,IACAf,EAAWJ,QAAUkB,EAAME,OAAOL,OAGtCO,cAAgBT,KAAKU,UAAUnB,GAC/BE,aAAakB,QAAQ,sBAAuBF,c,GAYkB,MAElEd,EAAKC,KAAKO,iBAAiB,UAXL,SAACE,GACnBA,EAAMO,iBACNC,QAAQC,IAAIvB,GAEZI,EAAKT,MAAMgB,MAAQ,GACnBP,EAAKR,QAAQe,MAAQ,GACrBT,aAAasB,O","sources":["src/js/03-feedback.js"],"sourcesContent":["// Напиши скрипт, який буде зберігати значення полів \n// у локальне сховище, коли користувач щось друкує.\n\n// 1+. Відстежуй на формі подію input, \n// і щоразу записуй у локальне сховище об'єкт з полями email і message, \n// у яких зберігай поточні значення полів форми.\n// Нехай ключем для сховища буде рядок \"feedback-form-state\".\n\n// 2+. Під час завантаження сторінки перевіряй стан сховища, \n// і якщо там є збережені дані, заповнюй ними поля форми.\n// В іншому випадку поля повинні бути порожніми.\n\n// 3+. Під час сабміту форми очищуй сховище і поля форми,\n// а також виводь у консоль об'єкт з полями email, \n// message та їхніми поточними значеннями.\n\n// 4+. Зроби так, щоб сховище оновлювалось не частіше, \n// ніж раз на 500 мілісекунд.\n// Для цього додай до проекту і використовуй бібліотеку lodash.throttle.\n\nimport _ from 'lodash';\n\nconst lodash = _; \nconst valuesForm = {};\nlet formObj = localStorage.getItem('feedback-form-state');\n\nconst refs = {\n    form: document.querySelector('.feedback-form'),\n    email: document.querySelector('input'),\n    message: document.querySelector('textarea'),\n}\n\nif (formObj) {\n    const dataFromStorage = JSON.parse(formObj)\n\n    writeValuesForm(dataFromStorage);\n}\n\nfunction writeValuesForm(dataFromStorage){\n    const {\n        email,\n        message,\n    } = dataFromStorage;\n\n    refs.email.value = email;\n    refs.message.value = message;\n\n    valuesForm.email = email;\n    valuesForm.message = message;\n}\n\nconst onInputWrite = (event) => {\n    const atrName = event.target.getAttribute('name');\n\n    if (atrName === \"email\") {\n        valuesForm.email = event.target.value;\n    }\n    \n    if (atrName === \"message\") {\n        valuesForm.message = event.target.value;\n    }\n\n    formObjValues = JSON.stringify(valuesForm);\n    localStorage.setItem(\"feedback-form-state\", formObjValues);\n}\n\nconst onButtonClick = (event) => {\n    event.preventDefault(); \n    console.log(valuesForm)\n\n    refs.email.value = '';\n    refs.message.value = '';\n    localStorage.clear();    \n}\n\nrefs.form.addEventListener('input', lodash.throttle(onInputWrite, 500));\n\nrefs.form.addEventListener('submit', onButtonClick)\n\n"],"names":["dataFromStorage","email","message","$b00c40859be242c5$var$lodash","$parcel$interopDefault","parcelRequire","$b00c40859be242c5$var$valuesForm","$b00c40859be242c5$var$formObj","localStorage","getItem","$b00c40859be242c5$var$refs","form","document","querySelector","$b00c40859be242c5$var$dataFromStorage","JSON","parse","value","addEventListener","throttle","event","atrName","target","getAttribute","formObjValues","stringify","setItem","preventDefault","console","log","clear"],"version":3,"file":"03-feedback.cc037098.js.map"}